'3.8d10

Option Explicit

Private pLiteralGroup As String
Private pHasErrors As Boolean
Private pErrorText As String
Private pDateStr As String
Private pRealDate As Date
Private pHasMinutes As Boolean

Public Property Get LiteralGroup() As String
    LiteralGroup = pLiteralGroup
End Property

Public Property Get HasErrors() As Boolean
    HasErrors = pHasErrors
End Property

Public Property Get ErrorText() As String
    ErrorText = pErrorText
End Property

Public Property Get DateString() As String
    DateString = pDateStr
End Property

Public Property Get RealDate() As Date 'can't be Date(), taken - duh
    RealDate = pRealDate
End Property

Public Property Get HasMinutes() As Boolean
    HasMinutes = pHasMinutes
End Property

Public Function Init(LitGroup As String) As CFromGroup
    pHasErrors = False
    If Not RXBool(LitGroup, "^FM\d{6}$") Then
        pHasErrors = True
        pErrorText = Trim(pErrorText & " Malformed")
        Exit Function
    End If
    pDateStr = Mid(LitGroup, 3)
    If TestTooManyDays(Left(pLiteralTime, 2)) Or TestTooManyHours(Mid(pLiteralTime, 3, 2)) Or _
      Right(pLiteralTime, 2) > 59 Then 'does not allow FMxx24xx
        pHasErrors = True
        pErrorText = Trim(pErrorText & " TimeBad")
        Exit Function
    End If
    pRealDate = BuildDTG(Left(pLiteralTime, 2), Mid(pLiteralTime, 3, 2), Right(pLiteralTime, 2))
    If CByte(Right(pLiteralTime, 2)) <> 0 Then
        pHasMinutes = True
    Else
        pHasMinutes = False
    End If
End Function
