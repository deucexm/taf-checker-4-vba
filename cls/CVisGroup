'3.8d10

Option Explicit

Private pLiteralGroup As String
Private pHasErrors As Boolean
Private pErrorText As String
Private pOriginalType As String
Private pMetersEquivalent As Long
Private pMilesEquivalent As Single

Private ptWhole As Long
Private ptFractional As Single

Public Property Get LiteralGroup() As String
    LiteralGroup = pLiteralGroup
End Property

Public Property Get HasErrors() As Boolean
    HasErrors = pHasErrors
End Property

Public Property Get ErrorText() As String
    ErrorText = pErrorText
End Property

Public Property Get Meters() As Long
    Meters = pMetersEquivalent
End Property

Public Property Get Miles() As Single
    Miles = pMilesEquivalent
End Property

Public Function Init(LitGroup As String) As CVisGroup
    pHasErrors = False
    If RXBool(LitGroup, "^((9999|([9865]0|4[840]|3[620]|2[86420]|1[86420]|0[0-68])00))$") Then
        pOriginalType = "METERS"
    ElseIf RXBool(LitGroup, "^(P6|\d{1,2}|([12]\s)?[1357]/([248]|16))SM$") Then
        pOriginalType = "MILES"
    Else
        pHasErrors = True
        pErrorText = Trim(pErrorText & " Malformed")
        Exit Function
    End If
    pLiteralGroup = LitGroup
    If pOriginalType = "METERS" Then
        pMetersEquivalent = CLng(pLiteralGroup)
        Select Case pMetersEquivalent
            Case 9999
                pMilesEquivalent = 7
            Case 9000
                pMilesEquivalent = 6
            Case 8000
                pMilesEquivalent = 5
            Case 6000
                pMilesEquivalent = 4
            Case 5000
                pMilesEquivalent = 3
            Case Else
                pMilesEquivalent = pMetersEquivalent / 1600
        End Select
    Else
        If Left(LitGroup, 2) = "P6" Then
            ptWhole = 7
            ptFractional = 0
        ElseIf InStr(LitGroup, "/") = 0 Then
            ptWhole = CLng(TakeOff(LitGroup, "right", 2))
            ptFractional = 0
        Else 'fraction exists
            If InStr(LitGroup, " ") = 0 Then 'fraction only
                ptWhole = 0
                ptFractional = Left(LitGroup, 1) / Mid(LitGroup, 3, Len(LitGroup) - 4)
            Else 'whole and fractional both
                ptWhole = Left(LitGroup, 1)
                ptFractional = Mid(LitGroup, 3, 1) / Mid(LitGroup, 5, Len(LitGroup) - 6)
            End If
            If ptFractional > 1 Then
                pHasErrors = True
                pErrorText = Trim(pErrorText & " ImproperFraction")
                Exit Function
            End If
        End If
        pMilesEquivalent = ptWhole + ptFractional
        Select Case pMilesEquivalent
            Case 0 To 3
                pMetersEquivalent = pMilesEquivalent * 1600
            Case 4
                pMetersEquivalent = 6000
            Case 5
                pMetersEquivalent = 8000
            Case 6
                pMetersEquivalent = 9000
            Case Else
                pMetersEquivalent = 9999
        End Select
    End If
End Function
